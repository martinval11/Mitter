import {
  Typography,
  CssBaseline,
  Container,
  Button,
  FormControlLabel,
  Checkbox,
  Link,
} from '@mui/material';

import Head from 'next/head';
import { useRouter } from 'next/router';

import { supabase } from '@/lib/supabaseClient';
import { encrypt } from '@/lib/security/encrypt';

import Error from '@/components/Error/Error';
import Input from '@/components/Input/Input';

import styles from '@/styles/form.module.css';

import { useState, useRef, useEffect } from 'react';
import Theme from '@/components/Theme/Theme';

const Index = () => {
  const [saveSessionCheck, setSaveSessionCheck] = useState(true);
  const [darkMode, setDarkMode] = useState(true);
  const [error, setError] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const userRef = useRef<HTMLInputElement>(null);
  const emailRef = useRef<HTMLInputElement>(null);
  const passRef = useRef<HTMLInputElement>(null);
  const confirmPassRef = useRef<HTMLInputElement>(null);

  const router = useRouter();

  const handleChange = (event: any) => {
    setSaveSessionCheck(event.target.checked);
  };

  const createAccount = async (event: any) => {
    event.preventDefault();

    if (passRef.current?.value !== confirmPassRef.current?.value) {
      setError(true);
      setErrorMessage('Passwords do not match');
      return;
    }

    const { error } = await supabase.from('users').insert([
      {
        name: userRef.current?.value,
        email: emailRef.current?.value,
        password: encrypt(passRef.current?.value),
      },
    ]);

    if (error) {
      setError(true);
      setErrorMessage('Something went wrong');
      setTimeout(() => {
        setError(false)
      }, 5000);
      return;
    }

    localStorage.setItem('username', userRef.current!.value);
    localStorage.setItem('saveSession', saveSessionCheck.toString());
    router.push('/home');
  };

  useEffect(() => {
    const session = Boolean(localStorage.getItem('saveSession'));
    const darkMode = Boolean(localStorage.getItem('darkMode'));

    {
      session ? router.push('/home') : null;
    }

    {
      darkMode ? setDarkMode(true) : null;
    }
  }, []);

  return (
    <>
      <Head>
        <title>Sign up for Mitter / Mitter</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </Head>

      <Theme color={darkMode}>
        <CssBaseline />

        <Container
          maxWidth="md"
          sx={{
            height: '100vh',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
          }}
        >
          <form onSubmit={createAccount} className={styles.form}>
            <Typography variant="h3">Create your account</Typography>

            <Input mt={3} type="email" label="Email" inputRef={emailRef} />

            <Input mt={2} type="text" label="Username" inputRef={userRef} />

            <Input
              mt={3}
              type="password"
              label="Password *"
              inputRef={passRef}
              inputProps={{ minLength: 8, maxLength: 20 }}
            />

            <Input
              mt={2}
              type="password"
              label="Confirm Password *"
              inputRef={confirmPassRef}
            />

            <FormControlLabel
              control={
                <Checkbox
                  checked={saveSessionCheck}
                  onChange={handleChange}
                  inputProps={{ 'aria-label': 'controlled' }}
                />
              }
              label="Save session"
            />

            <Button type="submit" variant="contained" sx={{ mt: 2 }}>
              Sign up
            </Button>

            <p>
              Have an account already? <Link href="/login">Log in</Link>
            </p>
          </form>
        </Container>

        {error && <Error message={errorMessage} />}
      </Theme>
    </>
  );
};

export default Index;
