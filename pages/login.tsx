import {
  Typography,
  CssBaseline,
  Container,
  Button,
  FormControlLabel,
  Checkbox,
  Link,
  Card,
} from '@mui/material';

import Head from 'next/head';

import { useRef, useState, useEffect } from 'react';
import { useRouter } from 'next/router';

import { supabase } from '@/lib/supabaseClient';
import { decrypt } from '@/lib/security/decrypt';

import styles from '@/styles/form.module.css';

import Input from '@/components/Input/Input';
import Error from '@/components/Error/Error';
import Theme from '@/components/Theme/Theme';

const Login = () => {
  const [saveSessionCheck, setSaveSessionCheck] = useState(true);
  const [darkMode, setDarkMode] = useState(false);
  const [error, setError] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const userRef: any = useRef<HTMLInputElement>(null);
  const passRef = useRef<HTMLInputElement>(null);

  const router = useRouter();

  const handleChange = (event: any) => {
    setSaveSessionCheck(event.target.checked);
  };

  const login = async (event: any) => {
    event.preventDefault();

    const { data: users, error } = await supabase
      .from('users')
      .select('name, password');

    if (error) {
      setError(true);
      setErrorMessage('Something went wrong');
      return;
    }

    const searchUser = users!.find(
      (user: any) =>
        user.name === userRef.current?.value &&
        decrypt(user.password).message === passRef.current?.value
    );

    if (searchUser) {
      localStorage.setItem('username', userRef.current?.value);
      localStorage.setItem('saveSession', saveSessionCheck.toString());

      router.push('/home');
      return;
    }

    setError(true);
    setErrorMessage('Invalid username or password');
    setTimeout(() => {
      setError(false);
    }, 5000);
  };

  useEffect(() => {
    const session = localStorage.getItem('saveSession');
    const darkMode = localStorage.getItem('darkMode');

    if (darkMode === 'true') {
      setDarkMode(true);
    } else {
      setDarkMode(false);
    }

    if (session === 'true') {
      router.push('/home');
    }
  }, []);

  return (
    <>
      <Head>
        <title>Log in to Mitter / Mitter</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </Head>

      <Theme color={darkMode}>
        <CssBaseline />

        <Container
          maxWidth="md"
          sx={{
            height: '100vh',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
          }}
        >
          <Card>
            <form onSubmit={login} className={styles.form}>
              <Typography variant="h3">Log in to Mitter</Typography>

              <Input mt={3} type="text" label="Username" inputRef={userRef} />

              <Input type="password" inputRef={passRef} label="Password" />

              <FormControlLabel
                control={
                  <Checkbox
                    checked={saveSessionCheck}
                    onChange={handleChange}
                    inputProps={{ 'aria-label': 'controlled' }}
                  />
                }
                label="Save session"
              />

              <Button type="submit" variant="contained" sx={{ mt: 2 }}>
                Log in
              </Button>

              <p>
                Don&apos;t have an account? <Link href="/signup">Sign up</Link>
              </p>
            </form>
          </Card>
        </Container>

        {error && <Error message={errorMessage} />}
      </Theme>
    </>
  );
};

export default Login;
